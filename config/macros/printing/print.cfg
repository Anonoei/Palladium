#####################################################################
#   Print Macros
#####################################################################
#  PRINT_PREPARE
#  PRINT_START
#  PRINT_END
#  CANCEL_PRINT
#  PAUSE
#  RESUME

[gcode_macro PRINT_PREPARE]
description: Prepare to print
gcode:
    {% set SETTINGS = printer["gcode_macro PRINT_START"]["values"] %}
    {% set CFG = printer["gcode_macro _CONFIG"] %}

    {% set CURRENT_HOTEND_TEMP = printer.extruder.temperature|float %}
    {% set CURRENT_BED_TEMP = printer.heater_bed.temperature|float %}
    {% set PROBE_TEMP = 95|float %}

    {% set FILAMENT = CFG.print_filament %}
    {% set DIAMETER = CFG.print_nozzle|float %}
    {% set SURFACE = CFG.print_surface %}

    _LOG NAME="print.PRINT_PREPARE" MSG="Preparing for print! [{SURFACE}-{DIAMETER}-{FILAMENT[0]}: {SETTINGS.HOTEND}C/{SETTINGS.BED}C/{SETTINGS.CHAMBER}C (H/B/C)]" DISPLAY=TRUE NOTIFY=TRUE
    BED_MESH_CLEAR

    # --- Heat the bed, if it's not heated, soak it
    _STATUS_HEATING                       ; Set LEDs to heating
    M140 S{SETTINGS.BED}                  ; Start heating bed
    {% if "xyz" in printer.toolhead.homed_axes %}
        PARK_CENTER
    {% endif %}
    {% if CURRENT_BED_TEMP + 30 < SETTINGS.BED %}
        _LOG NAME="print.PRINT_PREPARE" MSG="Bed at {CURRENT_BED_TEMP}. Heat soaking bed..." DISPLAY=TRUE
        STEPPERS_OFF
        SOAK_BED BED={SETTINGS.BED} DURATION=5
    {% else %}
        _LOG NAME="print.PRINT_PREPARE" MSG="Bed pre-heated, setting bed to {SETTINGS.BED}C..." DISPLAY=TRUE
    {% endif %}

    _CG28                             ; Conditional G28
    PARK_CENTER

    # --- Heat the nozzle to probing temperature
    _LOG NAME="print.PRINT_PREPARE" MSG="Waiting for nozzle to reach {PROBE_TEMP}C..." DISPLAY=TRUE
    M109 S{PROBE_TEMP}                ; Set nozzle to probe temp - forces cooling before wiping, and consistent temperature during probes
    
    NOZZLE_WIPE WIPES=8              ; Wipe the nozzle
    NOZZLE_SCRAPE DIST=12            ; Scrape the nozzle
    NOZZLE_WIPE WIPES=4              ; Wipe the nozzle
    
    G28 Z
    QUAD_GANTRY_LEVEL
    
    {% if CFG.print_bed_mesh == True %}
        _LOG NAME="print.PRINT_PREPARE" MSG="Performing adaptive bed mesh..." DISPLAY=TRUE
        BED_MESH_CALIBRATE
    {% endif %}
    
    _LOG NAME="print.PRINT_PREPARE" MSG="Wating for bed to reach {SETTINGS.BED}C..." DISPLAY=TRUE
    M190 S{SETTINGS.BED}              ; Ensure bed has reached temperature
    
    _STATUS_HOMING                    ; Set LEDs to homing
    _LOG NAME="print.PRINT_PREPARE" MSG="Homing Z..." DISPLAY=TRUE
    G28 Z                             ; Re-home z after bed has fully heated
        
    PARK_BUCKET                       ; Move over bucket before heating hotend
    _STATUS_HEATING                   ; Set LEDs to heating
    _LOG NAME="print.PRINT_PREPARE" MSG="Waiting for hotend to reach {SETTINGS.HOTEND}C..." DISPLAY=TRUE
    M109 S{SETTINGS.HOTEND}            ; Set and wait for nozzle to reach temperature
    
    _EXTRUDE_RELATIVE
    G92 E0                            ; Reset extruder
    G0 E{CFG.unretract_start} F600

[gcode_macro PRINT_START]
description: Called by slicer before starting print
variable_values: {'BED': 0, 'HOTEND': 0, 'CHAMBER': 0}
variable_bed_temp:     0
variable_hotend_temp:  0
variable_chamber_temp: 0
gcode:
    {% set BED_TEMP = params.BED_TEMP|float %}
    {% set HOTEND_TEMP = params.HOTEND_TEMP|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}

    {% set CFG = printer["gcode_macro _CONFIG"] %}

    {% set CLEAR = printer["gcode_macro _CONFIG"].print_bed_clear %}

    {% if CLEAR == True %}
        OFF_IN T=0                        ; cancel off timer
        SET_PIN PIN=caselight VALUE=0.8   ; Turn caselight on
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=electronics_fan TARGET={printer["gcode_macro _CONFIG"].printer_temp_cool}
        _SYNC_SETTINGS
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=values VALUE="{{'BED': BED_TEMP, 'HOTEND': HOTEND_TEMP, 'CHAMBER': CHAMBER_TEMP}}"

        PRINT_PREPARE

        _PLAY_PRINT_START                 ; Play print start tone
        _CLEAR_BUFFER

        SET_GCODE_VARIABLE MACRO=_CONFIG VARIABLE=print_bed_clear VALUE=False
        SAVE_VARIABLE VARIABLE=print_bed_clear VALUE=False
        NOZZLE_WIPE WIPES=6               ; Wipe the nozzle
        _STATUS_PRINTING                  ; Set LEDs to printing
        G92 E0                            ; Reset extruder
    {% else %}
        _LOG NAME="print.PRINT_START" LVL="ERROR" MSG="Cannot start print when bed is not clear!" DISPLAY=TRUE
    {% endif %}

[gcode_macro PRINT_END]
description: Called by slicer after print finishes
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    {% set HOTEND_TEMP = printer.extruder.temperature|float %}
    {% set BED_TEMP = printer.heater_bed.temperature|float %}
    {% set COOL_TEMP = 45 %}

    _CLEAR_BUFFER
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing

    _LOG NAME="print.PRINT_END" MSG="Holding bed at {BED_TEMP}" DISPLAY=TRUE
    M140 S{BED_TEMP}                         ; Hold the bed at temperature
    
    PRINT_CONCLUDE COOL_TO={HOTEND_TEMP - COOL_TEMP}
    
    OFF_IN T=15                              ; Set off timer to 15 minutes

[gcode_macro PRINT_CONCLUDE]
description: Clean up toolhead after print
gcode:
    {% set CFG = printer["gcode_macro _CONFIG"] %}
    {% set COOL_TO = params.COOL_TO|int %}
    
    _SYNC_SETTINGS                           ; reset settings to default
    PARK_BUCKET                              ; Park nozzle over bucket

    {% if CFG.ercf_enabled == False %}
        _EXTRUDE_RELATIVE
        G92 E0                                   ; zero the extruder
        G0 E-{CFG.retract_end}  F600
    {% else %}
        #FILAMENT_UNLOAD
        #ERCF_EJECT
    {% endif %}

    {% if COOL_TO > 130 %}
        _LOG NAME="print.PRINT_END" MSG="Cooling nozzle to {COOL_TO}" DISPLAY=TRUE
        M109 S{COOL_TO}
    {% endif %}

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    NOZZLE_WIPE WIPES=18                     ; Wipe the nozzle
    PARK_BUCKET

    M107                                     ; Turn off fan
    
    BED_MESH_CLEAR
    _PLAY_PRINT_END                          ; Play print end tune
    _STATUS_READY
    M140 S0                                  ; Turn bed off

[gcode_macro CANCEL_PRINT]
description: Cancel print
rename_existing: CANCEL_PRINT_BASE
gcode:
    OFF_IN T=-1 ; set timeout back to configured value
    CLEAR_PAUSE

    #SDCARD_RESET_FILE

    TURN_OFF_HEATERS
    M106 S0
    # clear pause_next_layer and pause_at_layer as preparation for next print
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0

    CANCEL_PRINT_BASE
    PRINT_END

[gcode_macro PAUSE]
description: Pause print
rename_existing: PAUSE_BASE
gcode:
    {% set z = params.Z|default(5)|int %}                                                   ; z hop amount
    {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
    {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}

    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SAVE_GCODE_STATE NAME=PAUSE                                                         ; save current print position for resume    
        _EXTRUDE_RELATIVE
        G92 E0                            ; Reset extruder
        G0 E-{printer['gcode_macro _CONFIG'].retract_pause} F1200

        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=values VALUE="{{'restore': restore, 'temp': temp, 'zhop': z}}"
        PAUSE_BASE

        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that z hop doesn't exceed z max
            _POSITION_RELATIVE
            G0 Z{z} F900                                                                    ; raise Z up by z hop amount
        {% else %}
            LOG NAME="print.PAUSE" LVL="WARN" MSG="Pause zhop exceeds maximum Z height." DISPLAY=TRUE
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=values VALUE="{{'restore': restore, 'temp': temp, 'zhop': 0}}"
        {% endif %}
        _POSITION_ABSOLUTE
        PARK_BUCKET
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                             ; turn off hotend
        OFF_IN T={4 * 60}                                                                   ; set off timer to 4 hours
    {% endif %}

[gcode_macro RESUME]
description: Resume print
rename_existing: RESUME_BASE
variable_values: {'restore': False, 'temp': 0, 'zhop': 5}
gcode:
    {% if printer['pause_resume'].is_paused|int == 1 %}
        OFF_IN T=-1                                      ; set timeout back to configured value
        {% if values.temp > 0 %}
            M109 S{values.temp|int}                                                                                      ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                         ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        _POSITION_RELATIVE
        _EXTRUDE_RELATIVE
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %} 
            G1 Z{values.zhop * -1} E{printer['gcode_macro _CONFIG'].retract_resume} F900                                 ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{values.zhop * -1} F900                                                                                  ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        NOZZLE_WIPE
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                             ; restore position

        {% if printer.idle_timeout.state|upper == "IDLE" %}
          {% if values.restore %} M109 S{values.temp} {% endif %}
        {% endif %}
        RESUME_BASE VELOCITY={params.VELOCITY|default(printer.configfile.settings.pause_resume.recover_velocity)}
    {% endif %}

## Adapted from mainsail.cfg
# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
  
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set CFG              = printer['gcode_macro _CONFIG'] %}
  {% set use_fw_retract   = (CFG.retract_enabled|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length           = params.LENGTH|default(CFG.unretract_length)|default(1.0)|float %}
  {% set speed            = params.SPEED|default(CFG.unretract_speed)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='Extruder not hot enough'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set CFG = printer['gcode_macro _CONFIG'] %}
  {% set length = params.LENGTH|default(CFG.retract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(CFG.retract_speed)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}