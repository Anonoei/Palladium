#####################################################################
#   Purge
#####################################################################
# Adapted from KAMP https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging
[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    # Get relevant printer params
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
    
    # Use firmware retraction if it is defined
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT   = G10 | string %}
        {% set UNRETRACT = G11 | string %}
    {% else %}
        {% set RETRACT   = 'G1 E-.5 F2100' | string %}
        {% set UNRETRACT = 'G1 E.5 F2100' | string %}
    {% endif %}

    # Get purge settings from _CONFIG
    {% set purge_height = printer["gcode_macro _CONFIG"].purge_height | float %}
    {% set purge_margin = printer["gcode_macro _CONFIG"].purge_margin | float %}
    {% set purge_amount = printer["gcode_macro _CONFIG"].purge_amount | float %}
    {% set flow_rate    = printer["gcode_macro _CONFIG"].purge_rate | float %}
    {% set prime        = printer["gcode_macro _CONFIG"].purge_prime | float %}
    {% set speed_xy     = printer["gcode_macro _CONFIG"].purge_speed_xy | float %}
    {% set speed_z      = printer["gcode_macro _CONFIG"].purge_speed_z | float %}

    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on X axis
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on Y axis

    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}                                  # Add margin to x min, compare to 0, and choose the larger
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}                                  # Add margin to y min, compare to 0, and choose the larger

    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    {% if cross_section < 5 %}
        {action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
    {% else %}
        {% if False %}
          {% if printer.firmware_retraction is defined %}
              {action_respond_info("Purge is using firmware retraction.")}
          {% else %}
              {action_respond_info("Purge is not using firmware retraction, it is recommended to configure it.")}
          {% endif %}
  
          {% if purge_y_origin > 0 %}
              {action_respond_info("Purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(                                                                 
                  (purge_x_center),
                  (purge_y_origin),
                  (purge_amount),
                  (flow_rate),
              )) }
          {% else %}
              {action_respond_info("Purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(                                                                 
                  (purge_x_origin),
                  (purge_y_center),
                  (purge_amount),
                  (flow_rate),
              )) }
          {% endif %}
        {% endif %}
        # Purge
        {% if purge_y_origin > 0 %}   # If there's room on Y, purge along X axis in front of print area
            G92 E0                                                                      # Reset extruder
            _POSITION_ABSOLUTE
            G0 X{purge_x_center} Y{purge_y_origin} F{speed_xy}                          # Move to purge position
            G0 Z{purge_height} F{speed_z}                                               # Move to purge Z height
            _EXTRUDE_RELATIVE
            G1 E{prime} F{purge_move_speed}                                         # Prime nozzle
            G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}     # Purge line
            {RETRACT}                                                                   # Retract
            G92 E0                                                                      # Reset extruder distance
            _EXTRUDE_ABSOLUTE
            G0 Z{purge_height * 2} F{speed_z}                                           # Z hop
        {% else %}                    # If there's room on X, purge along Y axis to the left of print area
            G92 E0                                                                      # Reset extruder
            _POSITION_ABSOLUTE
            G0 X{purge_x_origin} Y{purge_y_center} F{speed_xy}                        # Move to purge position
            G0 Z{purge_height} F{speed_z}                                             # Move to purge Z height
            _EXTRUDE_RELATIVE
            G1 E{prime} F{purge_move_speed}                                         # Prime nozzle
            G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}     # Purge line
            {RETRACT}                                                                   # Retract
            G92 E0                                                                      # Reset extruder distance
            _EXTRUDE_ABSOLUTE
            G0 Z{purge_height * 2} F{speed_z}                                           # Z hop
        {% endif %}
    {% endif %}
