#####################################################################
#   Homing
#####################################################################
# move.homing
#  _CG28
#  [homing_override]
#  _HOME_X
#  _HOME_Y
#  _HOME_Z
#  CALC_Z

[gcode_macro _CG28]
description: Conditional home axes
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        _STATUS_HOMING
        _LOG NAME="move.homing._CG28" MSG="Homing axes..." DISPLAY=TRUE
        G28
        _STATUS_READY
    {% endif %}

[homing_override]
axes: xyz
gcode:
    {% set CFG = printer["gcode_macro _CONFIG"] %}

    FORCE_CLEAR NAME="homing"

    {% set SAFETY_HOP         = CFG.home_safety_hop %}
    {% set SAFETY_HOP_SPEED   = CFG.home_safety_hop_speed %}

    # Read the current acceleration max
    {% set cur_accel = printer.toolhead.max_accel %}
    {% set cur_accel_to_decel = printer.toolhead.max_accel_to_decel %}
    # Read requested homing axis
    {% set requested = {'x': False,
                        'y': False,
                        'z': False} %}
    {% if   not 'X' in params
        and not 'Y' in params 
        and not 'Z' in params %}
        {% set X, Y, Z = True, True, True %}
    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
            {% set null = requested.update({'x': True}) %}
        {% endif %}
        {% if 'Y' in params %}
            {% set Y = True %}
            {% set null = requested.update({'y': True}) %}
        {% endif %}
        {% if 'Z' in params %}
            {% set Z = True %}
            {% set null = requested.update({'z': True}) %}
        {% endif %}
    {% endif %}

    _STATUS_HOMING

    # Pre-homing "unsafe" z-hop to protect bed
    {% if not "x" in printer.toolhead.homed_axes or not "y" in printer.toolhead.homed_axes or not "z" in printer.toolhead.homed_axes %}
        SET_KINEMATIC_POSITION Z=0
        _POSITION_RELATIVE
        G0 Z{SAFETY_HOP} F{(SAFETY_HOP_SPEED * 60)}
        STEPPERS_OFF
    {% else %}
        {% set pos = printer.toolhead.position %}
        {% if pos.z < SAFETY_HOP %}
            _POSITION_RELATIVE
            G0 Z{SAFETY_HOP} F{(SAFETY_HOP_SPEED * 60)}
        {% endif %}
    {% endif %}
    

    # Homing
    {% if X %}
        _HOME_X
    {% endif %}
    {% if Y %}
        _HOME_Y
    {% endif %}
    {% if Z %}
        _HOME_Z
        {% if CFG.autotap_set == 0 %}
            CALC_Z
        {% endif %}
    {% endif %}

    {% if printer.toolhead.max_accel != cur_accel %}
        SET_VELOCITY_LIMIT ACCEL={cur_accel} ACCEL_TO_DECEL={cur_accel_to_decel}
    {% endif %}


    _CLEAR_BUFFER

    _STATUS_READY

[gcode_macro _HOME_X]
description: Sensorlessly home X with modified current
gcode:
    {% set CFG = printer["gcode_macro _CONFIG"] %}

    FORCE_CLEAR NAME=move.homing._HOME_X

    {% set driver_config   = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR         = driver_config.run_current %}

    {% set HOME_ACCEL      = CFG.home_accel %}
    {% set HOME_CUR        = CFG.home_x_current %}

    {% set BOUNCE_ENABLED  = CFG.home_bounce_enabled %}
    {% set BOUNCE_DISTANCE = CFG.home_bounce_distance %}
    {% set BOUNCE_SPEED    = CFG.home_bounce_speed %}

    {% set WAIT_TIME       = CFG.home_wait %}

    _LOG NAME=move.homing._HOME_X LVL=TRACE MSG="Homing X axis"
    {% if CFG.home_sensorless %}
        # Set stepper current and acceleration
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
        SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
        _PAUSE T={WAIT_TIME} ; Wait to ensure driver stall flag is clear
    {% endif %}
    G28 X0 # Home

    _CLEAR_BUFFER
    {% if BOUNCE_ENABLED %}
        {% set max = printer.toolhead.axis_maximum %}
        {% set min = printer.toolhead.axis_minimum %}
        _POSITION_ABSOLUTE
        G0 X{(max.x - min.x)/2} F{(BOUNCE_SPEED * 60)}
    {% endif %}

    {% if CFG.home_sensorless %}
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR} ; reset stepper current
        _PAUSE T={WAIT_TIME} ; Wait to ensure driver stall flag is clear
    {% endif %}

[gcode_macro _HOME_Y]
description: Sensorlessly home Y with modified current
gcode:
    {% set CFG = printer["gcode_macro _CONFIG"] %}

    FORCE_CLEAR NAME=move.homing._HOME_Y

    {% set driver_config   = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR         = driver_config.run_current %}

    {% set HOME_ACCEL      = CFG.home_accel %}
    {% set HOME_CUR        = CFG.home_y_current %}

    {% set BOUNCE_ENABLED  = CFG.home_bounce_enabled %}
    {% set BOUNCE_DISTANCE = CFG.home_bounce_distance %}
    {% set BOUNCE_SPEED    = CFG.home_bounce_speed %}

    {% set WAIT_TIME       = CFG.home_wait %}

    _LOG NAME=move.homing._HOME_Y LVL=TRACE MSG="Homing Y axis"
    {% if CFG.home_sensorless %}
        # Set stepper current and acceleration
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
        SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
        _PAUSE T={WAIT_TIME} ; Wait to ensure driver stall flag is clear
    {% endif %}
    # Home
    G28 Y0

    _CLEAR_BUFFER
    {% if BOUNCE_ENABLED %}
        {% set max = printer.toolhead.axis_maximum %}
        {% set min = printer.toolhead.axis_minimum %}
        _POSITION_ABSOLUTE
        G0 Y{(max.y - min.y)/2} F{(BOUNCE_SPEED * 60)}
    {% endif %}

    {% if CFG.home_sensorless %}
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR} ; reset stepper current
        _PAUSE T={WAIT_TIME} ; Wait to ensure driver stall flag is clear
    {% endif %}

[gcode_macro _HOME_Z]
description: Home Z
gcode:
    {% set CFG = printer["gcode_macro _CONFIG"] %}

    FORCE_CLEAR NAME=move.homing._HOME_Z

    {% set PROBE_X = params.X|default(CFG.home_probe_x)|float %}
    {% set PROBE_Y = params.Y|default(CFG.home_probe_y)|float %}

    {% set PROBE_SPEED     = CFG.home_probe_speed %}
    {% set PROBE_HOP       = CFG.home_probe_hop %}
    {% set PROBE_HOP_SPEED = CFG.home_probe_hop_speed %}

    _LOG NAME=move.homing._HOME_Z LVL=TRACE MSG="Homing Z axis"
    _POSITION_ABSOLUTE
    G0 X{PROBE_X} Y{PROBE_Y} F{(PROBE_SPEED * 60)} # Move to safe coordinates
    G28 Z # Home Z
    G0 Z{PROBE_HOP} F{PROBE_HOP_SPEED} # Post z-home z-hop

[gcode_macro CALC_Z]
description: Calculate Z offset
gcode:
    {% set force = params.FORCE|default(False) %}

    {% set CFG = printer["gcode_macro _CONFIG"] %}

    {% if CFG.autotap and (CFG.autotap_set == 0 or force) %}
        {% set PROBE_HOP       = CFG.home_probe_hop %}
        {% set PROBE_HOP_SPEED = CFG.home_probe_hop_speed %}
        AUTO_TAP

        _POSITION_ABSOLUTE
        G0 Z{PROBE_HOP} F{PROBE_HOP_SPEED} # Post z-home z-hop
    {% endif %}