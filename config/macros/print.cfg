#####################################################################
#   Print Macros
#####################################################################
#  PRINT_START
#  PRINT_END
#  CANCEL
#  PAUSE
#  RESUME

[gcode_macro PRINT_START]
description: Called by slicer before starting print
variable_bed_temp:     0
variable_hotend_temp:  0
variable_chamber_temp: 0
gcode:
	{% set BED_TEMP = params.BED_TEMP|float %}
	{% set HOTEND_TEMP = params.HOTEND_TEMP|float %}
	{% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
	
	{% set CURRENT_HOTEND_TEMP = printer.extruder.temperature|float %}
    {% set CURRENT_BED_TEMP = printer.heater_bed.temperature|float %}
	{% set PURGE_TEMP = 150|float %}

    {% set MATERIAL = printer["gcode_macro _CONFIG"].print_filament|string %}
    {% set DIAMETER = printer["gcode_macro _CONFIG"].print_nozzle|float %}

    {% set CLEAR = printer["gcode_macro _CONFIG"].print_bed_clear %}

    {% if CLEAR == True %}
    	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bed_temp VALUE={BED_TEMP}
    	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotend_temp VALUE={HOTEND_TEMP}
    	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}
    	
    	OFF_IN TIME=0                     ; cancel off timer
    	SET_PIN PIN=caselight VALUE=0.8   ; Turn caselight on
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=electronics_fan TARGET={printer["gcode_macro _CONFIG"].printer_temp_cool}
    	
    	SAVE_GCODE_STATE NAME=STATE_PRINT_START
    	
    	RESPOND MSG="Preparing for print! [{MATERIAL}-{DIAMETER}: {HOTEND_TEMP}C/{BED_TEMP}C/{CHAMBER_TEMP}C (H/B/C)]"
        BED_MESH_CLEAR
    	_STATUS_HEATING                   ; Set LEDs to heating
        M140 S{BED_TEMP}                  ; Start heating bed
        {% if CURRENT_BED_TEMP + 40 < BED_TEMP %}
          HEAT_SOAK BED={BED_TEMP} DURATION=15
        {% else %}
          RESPOND MSG="Bed pre-heated, setting temperature to {BED_TEMP}C..."
        {% endif %}
    
        _CG28                             ; Conditional G28
    	
    	{% if CURRENT_HOTEND_TEMP > PURGE_TEMP %}
    	  RESPOND MSG="Waiting for nozzle to cool to {PURGE_TEMP}C..."
    	  M109 S{PURGE_TEMP}             ; Set nozzle to purge temp - forces cooling before wiping
    	  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    	{% endif %}
    
    	WIPE_NOZZLE WIPES=12              ; Wipe the nozzle
        RESPOND MSG="Homing Z..."
    	G28 Z
    	_CQGL                             ; Conditional QGL
    	
    	{% if printer["gcode_macro _CONFIG"].print_bed_mesh == True %}
    	  RESPOND MSG="Performing adaptive bed mesh..."
    	  BED_MESH_CALIBRATE
    	{% endif %}
    	
    	RESPOND MSG="Wating for bed to reach {BED_TEMP}C..."
    	M190 S{BED_TEMP}                  ; Set and wait for bed to reach temperature
    	
    	_STATUS_HOMING                    ; Set LEDs to homing
    	RESPOND MSG="Homing Z..."
    	G28 Z                             ; Re-home z after bed has fully heated
    	
    	PARK_BUCKET                       ; Move over bucket before heating hotend
    	_STATUS_HEATING                   ; Set LEDs to heating
    	RESPOND MSG="Waiting for hotend to reach {HOTEND_TEMP}C..."
    	M109 S{HOTEND_TEMP}               ; Set and wait for nozzle to reach temperature
    
        RESTORE_GCODE_STATE NAME=STATE_PRINT_START
    	#M400                             ; wait for buffer to clear
    	_PLAY_PRINT_START

        WIPE_NOZZLE WIPES=12              ; Wipe the nozzle
        FS_ENABLE
        _STATUS_PRINTING                  ; Set LEDs to printing
        #G1 E5 F900                       ; prime the nozzle
    	{% if printer["gcode_macro _CONFIG"].print_line_purge == True %}
    	  RESPOND MSG="Performing adaptive line purge..."
    	  LINE_PURGE                      ; Line purge
    	{% endif %}
        SET_GCODE_VARIABLE MACRO=_CONFIG VARIABLE=print_bed_clear VALUE=False
        SAVE_VARIABLE VARIABLE=print_bed_clear VALUE=False
    	G92 E0                            ; Reset extruder
        _STATUS_PRINTING                  ; Set LEDs to printing
    {% else %}
        RESPOND MSG="Cannot start print when bed is not clear!"
    {% endif %}

[gcode_macro PRINT_END]
description: Called by slicer after print finishes
gcode:
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	
	{% set HOTEND_TEMP = printer.extruder.temperature|float %}
	{% set BED_TEMP = printer.heater_bed.temperature|float %}
    {% set COOL_TEMP = 45 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	
	M400                                     ; wait for buffer to clear
    FS_DISABLE
	G92 E0                                   ; zero the extruder
    {% if printer.extruder.can_extrude|lower == 'true' %}
	    G1 E-5.0 F3600                           ; retract filament
    {% endif %}

    RESPOND MSG="Holding bed at {BED_TEMP}" 
	M140 S{BED_TEMP}                         ; Hold the bed at temperature

	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    _SYNC_SETTINGS                           ; reset settings to default
	PARK_BUCKET                              ; Park nozzle over bucket
    {% set COOL_TO = (HOTEND_TEMP - COOL_TEMP)|int %}
    {% if COOL_TO > 130 %}
	    RESPOND MSG="Cooling nozzle to {COOL_TO}"
	    M109 S{COOL_TO}
    {% endif %}

	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
	WIPE_NOZZLE WIPES=18                     ; Wipe the nozzle
	PARK_BUCKET

	M107                                     ; Turn off fan
	
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    _PLAY_PRINT_END                          ; Play print end tune
	_STATUS_READY
	M140 S0                                  ; Turn bed off
	OFF_IN TIME=15 ; Set off timer to 15 minutes

[gcode_macro CANCEL_PRINT]
description: Cancel print
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    FS_DISABLE

    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description: Pause print
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(5)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}   ; set hotend temp variable for reference in resume macro

        FS_DISABLE
        SAVE_GCODE_STATE NAME=PAUSE                                                         ; save current print position for resume                
        BASE_PAUSE                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that z hop doesn't exceed z max
            _POSITION_RELATIVE
            G0 Z{z} F900                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                 ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        _POSITION_ABSOLUTE
        PARK_BUCKET
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                             ; turn off hotend
        OFF_IN TIME=60                                                                      ; set off timer to 1 hour
    {% endif %}

[gcode_macro RESUME]
description: Resume print
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(2.5)|int %}

    {% if printer['pause_resume'].is_paused|int == 1 %}
        OFF_IN TIME=-1                                      ; set timeout back to configured value
        FS_ENABLE
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                            ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                         ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        _POSITION_RELATIVE
        M83                                                                                                              ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                             
            G1 Z{zhop * -1} E{e} F900                                                                                    ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        WIPE_NOZZLE
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                             ; restore position
        BASE_RESUME                                                                                                      ; resume print
    {% endif %}