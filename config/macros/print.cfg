#####################################################################
#   Print Macros
#####################################################################
#  PRINT_START
#  PRINT_END
#  CANCEL
#  PAUSE
#  RESUME

[gcode_macro PRINT_START]
description: Called by slicer before starting print
variable_bed_temp:     0
variable_hotend_temp:  0
variable_chamber_temp: 0
gcode:
	{% set BED_TEMP = params.BED_TEMP|float %}
	{% set HOTEND_TEMP = params.HOTEND_TEMP|float %}
	{% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
	
	{% set CURRENT_HOTEND_TEMP = printer.extruder.temperature|float %}
    {% set CURRENT_BED_TEMP = printer.heater_bed.temperature|float %}
	{% set PURGE_TEMP = 150|float %}

    {% set MATERIAL = printer["gcode_macro _CLIENT_VARIABLE"].print_filament|string %}
    {% set DIAMETER = printer["gcode_macro _CLIENT_VARIABLE"].print_nozzle|float %}
	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bed_temp VALUE={BED_TEMP}
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotend_temp VALUE={HOTEND_TEMP}
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}
	
	UPDATE_DELAYED_GCODE ID=_DELAYED_OFF DURATION=0 ; cancel off timer
	SET_PIN PIN=caselight VALUE=0.8                 ; Turn caselight on
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_START
	
	RESPOND MSG="Preparing for print! [{MATERIAL}-{DIAMETER} / Hotend: {HOTEND_TEMP}C / Bed: {BED_TEMP}C / Chamber: {CHAMBER_TEMP}C]"
    BED_MESH_CLEAR
	STATUS_HEATING                   ; Set LEDs to heating
    M140 S{BED_TEMP}                 ; Start heating bed
    {% if CURRENT_BED_TEMP + 40 < BED_TEMP %}
      HEAT_SOAK BED={BED_TEMP} DURATION=15
    {% else %}
      RESPOND MSG="Bed pre-heated, setting temperature to {BED_TEMP}C..."
    {% endif %}

	_CG28                            ; Conditional G28
	
	{% if CURRENT_HOTEND_TEMP > PURGE_TEMP %}
	  RESPOND MSG="Waiting for nozzle to cool to {PURGE_TEMP}C..."
	  M109 S{PURGE_TEMP}             ; Set nozzle to purge temp - forces cooling before wiping
	  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
	{% endif %}

	WIPE_NOZZLE WIPES=12             ; Wipe the nozzle
	G28 Z                            ; Home z
	_CQGL                            ; Conditional QGL
	
	
	{% if printer["gcode_macro _CLIENT_VARIABLE"].print_bed_mesh == True %}
	  RESPOND MSG="Performing adaptive bed mesh..."
	  BED_MESH_CALIBRATE
	{% endif %}
	
	RESPOND MSG="Wating for bed to reach {BED_TEMP}C..."
	M190 S{BED_TEMP}                 ; Set and wait for bed to reach temperature
	
	STATUS_HOMING                    ; Set LEDs to homing
	RESPOND MSG="Homing Z..."
	G28 Z                            ; Home z after bed has heated
	
	PARK_BUCKET                      ; Move over bucket before heating hotend
	STATUS_HEATING                   ; Set LEDs to heating
	RESPOND MSG="Waiting for hotend to reach {HOTEND_TEMP}C..."
	M109 S{HOTEND_TEMP}              ; Set and wait for nozzle to reach temperature
	
	WIPE_NOZZLE WIPES=12             ; Wipe the nozzle
	G90                              ; absolute positioning
	
	M400
    STATUS_PRINTING                  ; Set LEDs to printing
	_PLAY_PRINT_START
	{% if printer["gcode_macro _CLIENT_VARIABLE"].print_line_purge == True %}
	  RESPOND MSG="Performing adaptive line purge..."
	  LINE_PURGE                     ; Line purge
	{% endif %}
	G92 E0                           ; Reset extruder
	RESTORE_GCODE_STATE NAME=STATE_PRINT_START

[gcode_macro PRINT_END]
description: Called by slicer after print finishes
gcode:
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	
	{% set HOTEND_TEMP = printer.extruder.temperature|float %}
	{% set BED_TEMP = printer.heater_bed.temperature|float %}
    {% set COOL_TEMP = 45 %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	
	M400                                     ; wait for buffer to clear
	G92 E0                                   ; zero the extruder
	G1 E-5.0 F3600                           ; retract filament
	TURN_OFF_HEATERS

	M140 S{BED_TEMP}
	RESPOND MSG="Holding bed at {BED_TEMP}"

	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
	PARK_BUCKET                              ; Park nozzle over bucket
    {% if HOTEND_TEMP > 170 %}
	    RESPOND MSG="Cooling nozzle to {HOTEND_TEMP - COOL_TEMP}"
	    M109 S{HOTEND_TEMP - COOL_TEMP}
    {% endif %}

	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
	WIPE_NOZZLE WIPES=18                     ; Wipe the nozzle
	PARK_BUCKET

	M107                                     ; Turn off fan
	M400
	_PLAY_PRINT_END                          ; Play print end tune
	
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	STATUS_READY
	M140 S0
	UPDATE_DELAYED_GCODE ID=_DELAYED_OFF DURATION=900

[gcode_macro CANCEL_PRINT]
description: Cancel print
rename_existing: BASE_CANCEL_PRINT
gcode:
    CLEAR_PAUSE

    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description: Pause print
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(2)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}   ; set hotend temp variable for reference in resume macro
                                  
        SAVE_GCODE_STATE NAME=PAUSE                                                         ; save current print position for resume                
        BASE_PAUSE                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that z hop doesn't exceed z max
            G91                                                                             ; relative positioning
            G1 Z{z} F900                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                 ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                 ; absolute positioning
        PARK_BUCKET
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                      ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
description: Resume print
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                      ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                            ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                         ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                                              ; relative positioning
        M83                                                                                                              ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                             
            G1 Z{zhop * -1} E{e} F900                                                                                    ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        WIPE_NOZZLE
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                             ; restore position
        BASE_RESUME                                                                                                      ; resume print
    {% endif %}