###############################
# ERCF Calibration macros
###############################
[gcode_macro _ERCF_CALIB_SELECTOR]
description: Calibration of the selector position for a defined Tool
gcode:
    _ERCF_SERVO_UP

    {% set move_length=(20.0 + (params.TOOL|int + 1)*21.0 + ((params.TOOL|int + 1)/3)*5.0) %}

    M118 Measuring the selector position for tool {params.TOOL}
    ERCF_GET_SELECTOR_POS REF={move_length|int}
    
    _ERCF_MOTORS_OFF

[gcode_macro _ERCF_CALIBRATE]
description: Complete calibration of all ERCF Tools
gcode:
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    M118 Start the complete auto calibration...
    M118 First home the ERCF
    ERCF_HOME

    {% for chan in range(printer["gcode_macro _ERCF_VAR"].colorselector|length) %}
            _ERCF_CALIBRATE_SINGLE TOOL={chan|int}
    {% endfor %}

    M118 End of the complete auto calibration!
    M118 Please reload the firmware for the calibration to be active!

[gcode_macro _ERCF_CALIBRATE_SINGLE]
description: Calibration of a single ERCF Tool
gcode:
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    {% if params.TOOL|int >= 0 and params.TOOL|int < printer["gcode_macro _ERCF_VAR"].colorselector|length %}
        {% if printer["gcode_macro ERCF_HOME"].home == -1 %}
            M118 First home the ERCF
            ERCF_HOME
        {% endif %}

        _ERCF_SELECT_TOOL TOOL={params.TOOL}
        ERCF_SET_STEPS RATIO=1.0

        {% if params.TOOL|int == 0 %}
            {% if printer['extruder'].temperature < printer["gcode_macro _ERCF_VAR"].min_temp_extruder %}
            M109 S{printer["gcode_macro _ERCF_VAR"].min_temp_extruder|int}
            {% endif %}

            M118 Calibrating reference tool {params.TOOL}
            ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length} MOVES={printer["gcode_macro _ERCF_VAR"].num_moves}
            ERCF_HOME_EXTRUDER TOTAL_LENGTH={printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + 400} STEP_LENGTH=0.5
            
            _ERCF_CALIB_SAVE_VAR TOOL={params.TOOL}

            G91
            G92 E0
            MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
            MANUAL_STEPPER STEPPER=gear_stepper MOVE=-{printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float} SPEED=25 ACCEL={printer["gcode_macro _ERCF_VAR"].gear_stepper_accel|int} SYNC=0
            G1 E-{printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float} F1500.0

            _ERCF_CALIB_UNLOAD
            ERCF_BUZZ_GEAR_MOTOR
            _ERCF_IS_FILAMENT_STUCK_IN_ERCF
            
            _ERCF_UNSELECT_TOOL
        {% else %}
            M118 Calibrating tool {params.TOOL}

            ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length|float - 100.0} MOVES={printer["gcode_macro _ERCF_VAR"].num_moves}
            _ERCF_CALIB_SAVE_VAR tool={params.TOOL}

            _ERCF_CALIB_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length|float - 100.0 + 27.0} MOVES={printer["gcode_macro _ERCF_VAR"].num_moves}
        {% endif %}

    {% else %}
        M118 Tool out of range
    {% endif %}

[gcode_macro _ERCF_CALIB_SAVE_VAR]
description: Saving ERCF calibration values
gcode:
    {% if params.TOOL|int == 0 %}
        M118 Tool {params.TOOL} calibration value is {printer['ercf'].encoder_pos|float}
        SAVE_VARIABLE VARIABLE=ercf_calib_ref VALUE={printer['ercf'].encoder_pos|float} # this is the reference value
        SAVE_VARIABLE VARIABLE=ercf_calib_{params.TOOL|int} VALUE=1.0
        SET_GCODE_VARIABLE MACRO=_ERCF_CALIB_UNLOAD VARIABLE=ref VALUE={printer['ercf'].encoder_pos|float}
        SET_GCODE_VARIABLE MACRO=_ERCF_CALIB_UNLOAD VARIABLE=ratio VALUE=1.0
    {% else %}
        {% set ratio = (printer["gcode_macro _ERCF_VAR"].min_bowden_length|float - 100.0) / printer['ercf'].encoder_pos|float %}
        M118 Tool {params.TOOL} ratio is {ratio|float}
        SAVE_VARIABLE VARIABLE=ercf_calib_{params.TOOL|int} VALUE={ratio|float}
        SET_GCODE_VARIABLE MACRO=_ERCF_CALIB_UNLOAD VARIABLE=ratio VALUE={ratio|float}
    {% endif %}

[gcode_macro _ERCF_CALIB_UNLOAD]
description: Filament unload during ERCF calibration
variable_ratio: 0.0
variable_ref: 0.0
gcode:
    {% set unload_length = params.LENGTH|default(0.0)|float %}
    {% if unload_length|float == 0.0 %}
        ERCF_UNLOAD LENGTH={(ref|float)*(ratio|float) - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + 27.0}
    {% else %}
        {% if ratio|float < 1.0 %} # No correction move is done in case of "over targeting", hence the correction ratio is not applied during this unload sequence
            ERCF_UNLOAD LENGTH={(unload_length|float)}
        {% else %}
            ERCF_UNLOAD LENGTH={(unload_length|float)*(ratio|float)}
        {% endif %}
    {% endif %}

[gcode_macro _ERCF_GET_LOAD_THRESHOLD]
description: Measure the encoder threshold for the last part of the load
gcode:
    _ERCF_CHANGE_TOOL_STANDALONE TOOL=0 TUNE=1