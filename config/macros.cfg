#####################################################################
#   Macros
#####################################################################
# General Macros
#  _STARTUP
#  PRINT_START
#  PRINT_END
#  CANCEL
#  PAUSE
#  RESUME
#  G32
#  OFF
#  _DELAYED_OFF
#  ON
# Movement Macros
#  PARK
#  PARK_FRONT
#  PARK_BUCKET
# Conditional Macros
#  _CG28
#  _CQGL

[delayed_gcode _STARTUP]
initial_duration = 1
gcode:
	ON
	_PLAY_STARTUP
	SET_FILAMENT_SENSOR SENSOR=CW2 ENABLE=0

[gcode_macro PRINT_START]
description = Called by slicer before starting print
variable_bed_temp = 0
variable_hotend_temp = 0
variable_chamber_temp = 0
gcode = 
	{% set BED_TEMP = params.BED_TEMP|float %}
	{% set HOTEND_TEMP = params.HOTEND_TEMP|float %}
	{% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
	
	{% set CURRENT_TEMP = printer.extruder.temperature|float %}
	{% set PURGE_TEMP = 150|float %}
	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bed_temp VALUE={BED_TEMP}
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotend_temp VALUE={HOTEND_TEMP}
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}
	
	UPDATE_DELAYED_GCODE ID=_DELAYED_OFF DURATION=0
	SET_PIN PIN=caselight VALUE=0.8
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_START
	
	RESPOND MSG="Preparing for print! [Hotend: {HOTEND_TEMP}C / Bed: {BED_TEMP}C / Chamber: {CHAMBER_TEMP}C]"
	STATUS_HEATING
	RESPOND MSG="Setting bed temperature to {BED_TEMP}C..."
	M140 S{BED_TEMP}
	
	_CG28
	
	{% if CURRENT_TEMP > PURGE_TEMP %}
	RESPOND MSG="Waiting for nozzle to cool to {PURGE_TEMP}C..."
	M109 S{PURGE_TEMP}
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
	{% endif %}
	WIPE_NOZZLE WIPES=12
	G28 Z
	_CQGL
	
	BED_MESH_CLEAR
	{% if printer["gcode_macro _CLIENT_VARIABLE"].print_bed_mesh == True %}
	RESPOND MSG="Performing adaptive bed mesh..."
	BED_MESH_CALIBRATE
	{% endif %}
	
	RESPOND MSG="Wating for bed to reach {BED_TEMP}C..."
	M190 S{BED_TEMP}
	
	STATUS_HOMING
	RESPOND MSG="Homing Z..."
	G28 Z
	
	PARK_BUCKET
	STATUS_HEATING
	RESPOND MSG="Waiting for hotend to reach {HOTEND_TEMP}C..."
	M109 S{HOTEND_TEMP}
	
	WIPE_NOZZLE WIPES=12
	G90
	
	M400
	_PLAY_PRINT_START
	{% if printer["gcode_macro _CLIENT_VARIABLE"].print_line_purge == True %}
	RESPOND MSG="Performing adaptive line purge..."
	LINE_PURGE
	{% endif %}
	G92 E0
	RESTORE_GCODE_STATE NAME=STATE_PRINT_START

[gcode_macro PRINT_END]
description = Called by slicer after print finishes
gcode:
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	
	{% set HOTEND_TEMP = printer.extruder.temperature|float %}
	{% set BED_TEMP = printer.heater_bed.temperature|float %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	
	M400
	G92 E0
	G1 E-5.0 F3600
	TURN_OFF_HEATERS
	M140 S{BED_TEMP}
	RESPOND MSG="Holding bed at {BED_TEMP}"
	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000
	PARK_BUCKET
	RESPOND MSG="Cooling nozzle to {HOTEND_TEMP - 45}"
	M109 S{HOTEND_TEMP - 45}
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
	WIPE_NOZZLE WIPES=18
	PARK_BUCKET
	M107
	M400
	_PLAY_PRINT_END
	
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	STATUS_READY
	M140 S0
	UPDATE_DELAYED_GCODE ID=_DELAYED_OFF DURATION=900

[gcode_macro G32]
description = Home axes, QGL, then home again
gcode:
	STATUS_HOMING
	SAVE_GCODE_STATE NAME=STATE_G32
	G90
	RESPOND MSG="Homing X, Y, Z axes..."
	G28
	
	STATUS_LEVELING
	RESPOND MSG="Performing QGL..."
	QUAD_GANTRY_LEVEL
	
	STATUS_HOMING
	RESPOND MSG="Homing X, Y, Z axes..."
	G28
	PARK
	RESTORE_GCODE_STATE NAME=STATE_G32
	STATUS_READY

[gcode_macro OFF]
description = Turn stuff off
gcode:
	RESPOND MSG="Turning off..."
	M84
	TURN_OFF_HEATERS
	M107
	SET_PIN PIN=caselight VALUE=0
	SET_LED LED="doas_left"  RED=1 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
	SET_LED LED="doas_right" RED=0 GREEN=0 BLUE=1 SYNC=0 TRANSMIT=1
	STATUS_OFF
	SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=electronics_fan TARGET={printer["gcode_macro _CLIENT_VARIABLE"].printer_temp_idle}

[gcode_macro ON]
description = Turn stuff back on
gcode:
	SET_PIN PIN=caselight VALUE=0.8
	SET_LED LED="doas_left"  RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
	SET_LED LED="doas_right" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
	STATUS_STANDBY
	SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=electronics_fan TARGET={printer["gcode_macro _CLIENT_VARIABLE"].printer_temp_cool}

[delayed_gcode _DELAYED_OFF]
gcode:
	OFF

# -================================-
#   Movement Macros
# -================================-
[gcode_macro PARK]
description = Park the toolhead
gcode:
	_CG28
	G90
	G0 Z30 F2000
	G0 X150 Y150 F4000
	STATUS_STANDBY

[gcode_macro PARK_FRONT]
description = Park the toolhead at the front of the printer
gcode:
	_CG28
	G90
	G0 Z150 F3000
	G0 X150 Y0 F4000
	STATUS_STANDBY

[gcode_macro PARK_BUCKET]
description = Park the toolhead over the purge bucket
gcode:
	{% set dZ = params.dz|default(2)|float %}
	{% set X = printer["gcode_macro _CLIENT_VARIABLE"].bucket_x|float %}
	{% set Y = printer["gcode_macro _CLIENT_VARIABLE"].bucket_y|float %}
	{% set Z = printer["gcode_macro _CLIENT_VARIABLE"].bucket_z|float %}
	{% set WIDTH = printer["gcode_macro _CLIENT_VARIABLE"].bucket_width|float %}
	_CG28
	G91
	G0 Z{dZ} F500
	G90
	G0 X{X + (WIDTH / 4)} Y{Y} F3000
	G0 Z{Z} F3000
	STATUS_STANDBY
# -================================-
#   Conditional Macros
# -================================-
[gcode_macro _CG28]
description: Conditional home axes
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        RESPOND MSG="Homing axes..."
        G28
    {% endif %}
    STATUS_READY

[gcode_macro _CQGL]
description: Conditional QGL
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        _CG28
        STATUS_LEVELING
        RESPOND MSG="Performing QGL..."
        QUAD_GANTRY_LEVEL
        STATUS_HOMING
        RESPOND MSG="Homing Z..."
        G28 Z
    {% endif %}
    STATUS_READY