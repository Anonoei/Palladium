#####################################################################
#   Macros
#####################################################################
# General Macros
#  _CLIENT_VARIABLE
#  PRINT_START
#  PRINT_END
#  G32
# Movements
#  PARK
#  BUCKET
# Conditionals 
#  _CG28
#  _CQGL
# Overrides
#  M109
#  SET_HEATER_TEMPERATURE
#  M190
#  M140
#  TURN_OFF_HEATERS

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
#variable_custom_park_x    : 150   ; custom x position; value must be within your defined min and max of X
#variable_custom_park_y    : 150   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False]
gcode:

## Use PRINT_START for the slicer starting script - please customise for your slicer of choice
[gcode_macro PRINT_START]
variable_bed_temp:     0
variable_hotend_temp:  0
variable_chamber_temp: 0
gcode:
    {% set BED_TEMP = params.BED_TEMP|float %}
    {% set HOTEND_TEMP = params.HOTEND_TEMP|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}

    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bed_temp VALUE={BED_TEMP}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotend_temp VALUE={HOTEND_TEMP} 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}

    SAVE_GCODE_STATE NAME=STATE_PRINT_START
    SET_PIN PIN=caselight VALUE=0.8  ; Turn caselight on
    _CG28                            ; Conditional G28
    _CQGL                            ; Conditional GQL
    G90                              ; Use absolute positioning
    SETUP_LINE_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1

    BUCKET                           ; move nozzle over bucket for oozing
    STATUS_HEATING                   ; Set LEDs to heating
    RESPOND MSG="Heating bed..."
    M140 S{BED_TEMP}                 ; ensure bed is at temperature      

    STATUS_HOMING                    ; Set LEDs to homing
    RESPOND MSG="Homing Z..."
    G28 Z

    STATUS_HEATING                   ; Set LEDs to heating
    RESPOND MSG="Heating extruder..."
    M109 S{EXTRUDER_TEMP}            ; Set and wait for nozzle to reach temperature

    WIPE_NOZZLE WIPES=12             ; Wipe the nozzle
    G90                              ; absolute positioning

    PLAY_PRINT_START                 ; Play print start tune
    SET_FAN_SPEED FAN=electronics_fan SPEED=0.6
    G92 E0                           ; Reset extruder
    LINE_PURGE                       ; Line purge

    RESTORE_GCODE_STATE NAME=STATE_PRINT_START
    STATUS_PRINTING

## Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                 ; retract filament
    TURN_OFF_HEATERS
    BUCKET                         ; Move to bucket
    WIPE_NOZZLE                    ; Wipe the nozzle
    BUCKET                         ; Park nozzle over bucket
    M107                           ; Turn off fan
    PLAY_PRINT_END                 ; Play print end tune
    
    BED_MESH_CLEAR
    SET_FAN_SPEED FAN=electronics_fan SPEED=0
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    STATUS_READY

[gcode_macro G32]
gcode:
    STATUS_HOMING
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    RESPOND MSG="Homing X, Y, Z axes..."
    G28

    STATUS_LEVELING
    RESPOND MSG="Performing QGL..."
    QUAD_GANTRY_LEVEL

    STATUS_HOMING
    RESPOND MSG="Homing X, Y, Z axes..."
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32
    STATUS_READY

# -================================-
#   Movements
# -================================-
[gcode_macro PARK]
gcode:
    _CG28
    G90  ; absolute coordinates
    G0 Z30 F3000
    G0 X150 Y150 F3000
    STATUS_STANDBY

[gcode_macro BUCKET]
gcode:
    {% set dZ = params.dz|default(2)|float %}
    {% set X = printer["gcode_macro _BUCKET_VARS"].bucket_x|float %}
    {% set Y = printer["gcode_macro _BUCKET_VARS"].bucket_y|float %}
    {% set Z = printer["gcode_macro _BUCKET_VARS"].bucket_z|float %}
    {% set WIDTH = printer["gcode_macro _BUCKET_VARS"].bucket_width|float %}
    _CG28
    G91  ; = relative coordinates
    G0 Z{dZ} F500
    G90  ; absolute coordinates
    G0 X{X + (BUCKET_WIDTH / 4)} Y{Y} F3000
    G0 Z{Z} F3000
    STATUS_STANDBY

# -================================-
#   Conditionals
# -================================-
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        RESPOND MSG="Homing axes..."
        G28
    {% endif %}
    STATUS_READY

[gcode_macro _CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        _CG28
        STATUS_LEVELING
        QUAD_GANTRY_LEVEL
        STATUS_HOMING
        G28 Z
    {% endif %}
    STATUS_READY

# -================================-
#   Overrides!
# -================================-
[gcode_macro M109]
description: Heat extruder
rename_existing: M99109
gcode:
    {% set s = params.S|float %}
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        STATUS_HEATING
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}
    STATUS_READY

[gcode_macro SET_HEATER_TEMPERATURE]
description: Heat extruder or bed
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	{% set THRESHOLD = printer["gcode_macro _NEVERMORE_VARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
        STATUS_HEATING
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
        STATUS_HEATING
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			NEVERMORE_SLOW
			UPDATE_DELAYED_GCODE ID=_NEVERMORE_LOOP DURATION=1
		{% else %}
			NEVERMORE_OFF
			UPDATE_DELAYED_GCODE ID=_NEVERMORE_LOOP DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
    STATUS_READY
	
[gcode_macro M190]
description: Wait for bed temperature
rename_existing: M99190
gcode:
	{% set S = params.S|int %}
	{% set THRESHOLD = printer["gcode_macro _NEVERMORE_VARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		NEVERMORE_SLOW																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		NEVERMORE_OFF																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
        STATUS_HEATING
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		NEVERMORE_FAST																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
    STATUS_READY
	
[gcode_macro M140]
description: Set bed temperature
rename_existing: M99140
gcode:
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
    STATUS_READY
	
[gcode_macro TURN_OFF_HEATERS]
description: Turns off heaters
rename_existing: _TURN_OFF_HEATERS
gcode:
	NEVERMORE_OFF
	_TURN_OFF_HEATERS
    STATUS_STANDBY