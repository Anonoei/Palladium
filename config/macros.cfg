#####################################################################
#   Macros
#####################################################################
# General Macros
#  _STARTUP
#  PRINT_START
#  PRINT_END
#  CANCEL
#  PAUSE
#  RESUME
#  G32
#  OFF
#  _DELAYED_OFF
#  ON
# Movement Macros
#  PARK
#  PARK_FRONT
#  PARK_BUCKET
# Conditional Macros
#  _CG28
#  _CQGL

[delayed_gcode _STARTUP]
initial_duration: 1
gcode:
    ON
    _PLAY_STARTUP

[gcode_macro PRINT_START]
description: Called by slicer before starting print
variable_bed_temp:     0
variable_hotend_temp:  0
variable_chamber_temp: 0
gcode:
    {% set BED_TEMP = params.BED_TEMP|float %}
    {% set HOTEND_TEMP = params.HOTEND_TEMP|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}

    {% set PURGE_TEMP = 150|float %}

    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bed_temp VALUE={BED_TEMP}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotend_temp VALUE={HOTEND_TEMP} 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}

    UPDATE_DELAYED_GCODE ID=_DELAYED_OFF DURATION=0 ; cancel off timer
    SET_PIN PIN=caselight VALUE=0.8                 ; Turn caselight on

    SAVE_GCODE_STATE NAME=STATE_PRINT_START
    {% if printer["gcode_macro _CLIENT_VARIABLE"].print_bed_mesh == True %}
        SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1
    {% endif %}
    {% if printer["gcode_macro _CLIENT_VARIABLE"].print_line_purge == True %}
        SETUP_LINE_PURGE DISPLAY_PARAMETERS=0 ADAPTIVE_ENABLE=1 LINE_LENGTH=40 FLOW_RATE=24 PURGE_AMOUNT=20 DISTANCE_TO_OBJECT_Y=15
    {% endif %}

    RESPOND MSG="Preparing for print! [Hotend: {HOTEND_TEMP}C / Bed: {BED_TEMP}C / Chamber: {CHAMBER_TEMP}C]"
    STATUS_HEATING                   ; Set LEDs to heating
    RESPOND MSG="Setting bed temperature to {BED_TEMP}C..."
    M140 S{BED_TEMP}                 ; Start heating bed

    _CG28                            ; Conditional G28
    RESPOND MSG="Waiting for nozzle to reach {PURGE_TEMP}C..."
    M109 S{PURGE_TEMP}               ; Set nozzle to purge temp - forces cooling before wiping
    WIPE_NOZZLE WIPES=12             ; Wipe the nozzle
    G28 Z                            ; Home z
    _CQGL                            ; Conditional QGL

    BED_MESH_CLEAR
    {% if printer["gcode_macro _CLIENT_VARIABLE"].print_bed_mesh == True %}
      RESPOND MSG="Performing adaptive bed mesh..."
      BED_MESH_CALIBRATE               ; Do bed mesh
    {% endif %}
    
    RESPOND MSG="Wating for bed to reach {BED_TEMP}C..."
    M190 S{BED_TEMP}                 ; Set and wait for bed to reach temperature

    STATUS_HOMING                    ; Set LEDs to homing
    RESPOND MSG="Homing Z..."
    G28 Z                            ; Home z after bed has heated

    PARK_BUCKET                      ; Move over bucket before heating hotend
    STATUS_HEATING                   ; Set LEDs to heating
    RESPOND MSG="Waiting for hotend to reach {HOTEND_TEMP}C..."
    M109 S{HOTEND_TEMP}              ; Set and wait for nozzle to reach temperature

    WIPE_NOZZLE WIPES=12             ; Wipe the nozzle
    G90                              ; absolute positioning

    _PLAY_PRINT_START                ; Play print start tune
    G92 E0                           ; Reset extruder
    {% if printer["gcode_macro _CLIENT_VARIABLE"].print_line_purge == True %}
        RESPOND MSG="Performing adaptive line purge..."
        LINE_PURGE                   ; Line purge
    {% endif %}

    RESTORE_GCODE_STATE NAME=STATE_PRINT_START

[gcode_macro PRINT_END]
description: Called by slicer after print finishes
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                                     ; wait for buffer to clear
    G92 E0                                   ; zero the extruder
    G1 E-5.0 F3600                           ; retract filament
    TURN_OFF_HEATERS
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    WIPE_NOZZLE WIPES=12                     ; Wipe the nozzle
    PARK_BUCKET                              ; Park nozzle over bucket
    M107                                     ; Turn off fan
    _PLAY_PRINT_END                          ; Play print end tune
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    STATUS_READY
    UPDATE_DELAYED_GCODE ID=_DELAYED_OFF DURATION=900 ; turn everything off in 15 min

[gcode_macro CANCEL_PRINT]
description: Cancel print
rename_existing: BASE_CANCEL_PRINT
gcode:
    CLEAR_PAUSE
    #SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description: Pause print
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(2)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}   ; set hotend temp variable for reference in resume macro
                                  
        SAVE_GCODE_STATE NAME=PAUSE                                                         ; save current print position for resume                
        BASE_PAUSE                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that z hop doesn't exceed z max
            G91                                                                             ; relative positioning
            G1 Z{z} F900                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                 ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                 ; absolute positioning
        PARK_BUCKET
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                      ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
description: Pause print
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                      ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                            ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                         ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                                              ; relative positioning
        M83                                                                                                              ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                             
            G1 Z{zhop * -1} E{e} F900                                                                                    ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        WIPE_NOZZLE
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                             ; restore position
        BASE_RESUME                                                                                                      ; resume print
    {% endif %}

[gcode_macro G32]
description: Home axes, QGL, then home again
gcode:
    STATUS_HOMING
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    RESPOND MSG="Homing X, Y, Z axes..."
    G28

    STATUS_LEVELING
    RESPOND MSG="Performing QGL..."
    QUAD_GANTRY_LEVEL

    STATUS_HOMING
    RESPOND MSG="Homing X, Y, Z axes..."
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32
    STATUS_READY

[gcode_macro OFF]
description: Turn stuff off
gcode:
    RESPOND MSG="Turning off..."
    M84                               ; turn steppers off
    TURN_OFF_HEATERS                  ; turn bed / hotend off
    M107                              ; turn print cooling fan off
    SET_PIN PIN=caselight VALUE=0     ; turn light off
    SET_LED LED="doas_left"  RED=1 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
    SET_LED LED="doas_right" RED=0 GREEN=0 BLUE=1 SYNC=0 TRANSMIT=1
    STATUS_OFF                        ; Set stealburner LEDs to off
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=electronics_fan TARGET=50

[gcode_macro ON]
description: Turn stuff back on
gcode:
    SET_PIN PIN=caselight VALUE=0.8   ; turn light on
    SET_LED LED="doas_left"  RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
    SET_LED LED="doas_right" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
    STATUS_STANDBY                    ; Set stealburner LEDs to standby
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=electronics_fan TARGET=45

[delayed_gcode _DELAYED_OFF]
gcode:
    OFF ; call "OFF" macro

# -================================-
#   Movement Macros
# -================================-
[gcode_macro PARK]
description: Park the toolhead
gcode:
    _CG28
    G90  ; absolute coordinates
    G0 Z30 F2000
    G0 X150 Y150 F4000
    STATUS_STANDBY

[gcode_macro PARK_FRONT]
description: Park the toolhead at the front of the printer
gcode:
    _CG28
    G90
    G0 Z150 F3000
    G0 X150 Y0 F4000
    STATUS_STANDBY

[gcode_macro PARK_BUCKET]
description: Park the toolhead over the purge bucket
gcode:
    {% set dZ = params.dz|default(2)|float %}
    {% set X = printer["gcode_macro _CLIENT_VARIABLE"].bucket_x|float %}
    {% set Y = printer["gcode_macro _CLIENT_VARIABLE"].bucket_y|float %}
    {% set Z = printer["gcode_macro _CLIENT_VARIABLE"].bucket_z|float %}
    {% set WIDTH = printer["gcode_macro _CLIENT_VARIABLE"].bucket_width|float %}
    _CG28
    G91  ; = relative coordinates
    G0 Z{dZ} F500
    G90  ; absolute coordinates
    G0 X{X + (WIDTH / 4)} Y{Y} F3000
    G0 Z{Z} F3000
    STATUS_STANDBY

# -================================-
#   Conditional Macros
# -================================-
[gcode_macro _CG28]
description: Conditional home axes
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        STATUS_HOMING
        RESPOND MSG="Homing axes..."
        G28
    {% endif %}
    STATUS_READY

[gcode_macro _CQGL]
description: Conditional QGL
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        _CG28
        STATUS_LEVELING
        RESPOND MSG="Performing QGL..."
        QUAD_GANTRY_LEVEL
        STATUS_HOMING
        RESPOND MSG="Homing Z..."
        G28 Z
    {% endif %}
    STATUS_READY